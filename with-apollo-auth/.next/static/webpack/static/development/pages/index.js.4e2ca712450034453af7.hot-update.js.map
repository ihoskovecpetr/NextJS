{"version":3,"file":"static/webpack/static/development/pages/index.js.4e2ca712450034453af7.hot-update.js","sources":["webpack:///./lib/apollo.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cookie from \"cookie\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport fetch from \"isomorphic-unfetch\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    console.log(\"apolloState: \", apolloState);\n    console.log(\"apolloClient: \");\n    console.log(\"...pageProps: \");\n    const client = apolloClient || initApolloClient(apolloState, { getToken });\n    console.log(\"client: \");\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n\n    // Add some prop types\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object\n    };\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    console.log(\"Pass> \", WithApollo.getInitialProps());\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n      console.log(\"CTX E: \");\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.apolloClient = initApolloClient(\n        {},\n        {\n          getToken: () => getToken(ctx.req)\n        }\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n      console.log(\"pageProps1: \", pageProps);\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            console.log(\"pageProps2: \", pageProps);\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  console.log(\"initApolloClient ...args: \", ...args);\n  if (typeof window === \"undefined\") {\n    return createApolloClient(...args);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(...args);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, { getToken }) {\n  const fetchOptions = {};\n\n  // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n  console.log(\"restoring CACHE INSTATE 0: \", initialState);\n  if (typeof window === \"undefined\") {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require(\"https-proxy-agent\"))(\n        process.env.https_proxy\n      );\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: \"https://api.graph.cool/simple/v1/cj5geu3slxl7t0127y8sity9r\", // Server URL (must be absolute)\n    credentials: \"same-origin\",\n    fetch,\n    fetchOptions\n  });\n\n  const authLink = setContext((request, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\"\n      }\n    };\n  });\n  console.log(\"restoring CACHE INSTATE: \", initialState);\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\nfunction getToken(req) {\n  const cookies = cookie.parse(\n    req ? req.headers.cookie || \"\" : document.cookie\n  );\n  console.log(\"Got token: \", cookies.token);\n  return cookies.token;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AADA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAYA;AAGA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AA0BA;AACA;AA3BA;AAAA;AACA;AADA;AAAA;AA4BA;AA5BA;AAAA;AA+BA;AAEA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsCA;AACA;AACA;AACA;AACA;AA1CA;AA6CA;AACA;AACA;AACA;AAhDA;AAkDA;AACA;AAnDA;AAuDA;AAvDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA0DA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAIA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA,eAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAHA;AAKA;AAEA;;;;;;AAIA;AACA;AAGA;AACA;AACA;;;;A","sourceRoot":""}
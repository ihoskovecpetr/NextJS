{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/macuser/Desktop/code/with-apollo-auth/lib/apollo.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cookie from \"cookie\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport fetch from \"isomorphic-unfetch\";\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr;\n\n  var WithApollo = function WithApollo(_ref2) {\n    var apolloClient = _ref2.apolloClient,\n        apolloState = _ref2.apolloState,\n        pageProps = _objectWithoutProperties(_ref2, [\"apolloClient\", \"apolloState\"]);\n\n    console.log(\"apolloState: \", apolloState);\n    console.log(\"apolloClient: \");\n    console.log(\"...pageProps: \");\n    var client = apolloClient || initApolloClient(apolloState, {\n      getToken: _getToken\n    });\n    console.log(\"client: \");\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })));\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\"); // Add some prop types\n\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object\n    };\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    console.log(\"Pass\");\n\n    WithApollo.getInitialProps =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var AppTree, apolloClient, pageProps, _ref4, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = ctx.AppTree;\n                console.log(\"CTX E: \"); // Run all GraphQL queries in the component tree\n                // and extract the resulting data\n\n                apolloClient = ctx.apolloClient = initApolloClient({}, {\n                  getToken: function getToken() {\n                    return _getToken(ctx.req);\n                  }\n                });\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 6;\n                return PageComponent.getInitialProps(ctx);\n\n              case 6:\n                _context.t0 = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 9:\n                _context.t0 = {};\n\n              case 10:\n                pageProps = _context.t0;\n                console.log(\"pageProps1: \", pageProps); // Only on the server\n\n                if (!false) {\n                  _context.next = 30;\n                  break;\n                }\n\n                if (!(ctx.res && ctx.res.finished)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {});\n\n              case 15:\n                if (!ssr) {\n                  _context.next = 29;\n                  break;\n                }\n\n                _context.prev = 16;\n                // Run all GraphQL queries\n                console.log(\"pageProps2: \", pageProps);\n                _context.next = 20;\n                return import(\"@apollo/react-ssr\");\n\n              case 20:\n                _ref4 = _context.sent;\n                getDataFromTree = _ref4.getDataFromTree;\n                _context.next = 24;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread({}, pageProps, {\n                    apolloClient: apolloClient\n                  }),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 88\n                  },\n                  __self: this\n                }));\n\n              case 24:\n                _context.next = 29;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t1 = _context[\"catch\"](16);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n              case 29:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 30:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread({}, pageProps, {\n                  apolloState: apolloState\n                }));\n\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[16, 26]]);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null;\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\nfunction initApolloClient() {\n  var _console;\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  (_console = console).log.apply(_console, [\"initApolloClient ...args: \"].concat(args));\n\n  if (false) {\n    return createApolloClient.apply(void 0, args);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient.apply(void 0, args);\n  }\n\n  return apolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _ref5 = arguments.length > 1 ? arguments[1] : undefined,\n      getToken = _ref5.getToken;\n\n  var fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n\n  console.log(\"restoring CACHE INSTATE 0: \", initialState);\n\n  if (false) {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require(\"https-proxy-agent\"))(process.env.https_proxy);\n    }\n  }\n\n  var httpLink = new HttpLink({\n    uri: \"https://api.graph.cool/simple/v1/cj5geu3slxl7t0127y8sity9r\",\n    // Server URL (must be absolute)\n    credentials: \"same-origin\",\n    fetch: fetch,\n    fetchOptions: fetchOptions\n  });\n  var authLink = setContext(function (request, _ref6) {\n    var headers = _ref6.headers;\n    var token = getToken();\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"Bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  console.log(\"restoring CACHE INSTATE: \", initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: false,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\n\n\nfunction _getToken(req) {\n  var cookies = cookie.parse(req ? req.headers.cookie || \"\" : document.cookie);\n  console.log(\"Got token: \", cookies.token);\n  return cookies.token;\n}","map":{"version":3,"sources":["/Users/macuser/Desktop/code/with-apollo-auth/lib/apollo.js"],"names":["React","PropTypes","cookie","Head","ApolloClient","InMemoryCache","HttpLink","setContext","ApolloProvider","fetch","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","console","log","client","initApolloClient","getToken","process","env","NODE_ENV","displayName","name","warn","propTypes","object","getInitialProps","ctx","AppTree","req","res","finished","getDataFromTree","error","rewind","cache","extract","args","createApolloClient","initialState","fetchOptions","https_proxy","agent","require","httpLink","uri","credentials","authLink","request","headers","token","authorization","ssrMode","link","concat","restore","cookies","parse","document"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cookie from \"cookie\";\nimport Head from \"next/head\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport fetch from \"isomorphic-unfetch\";\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo(PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    console.log(\"apolloState: \", apolloState);\n    console.log(\"apolloClient: \");\n    console.log(\"...pageProps: \");\n    const client = apolloClient || initApolloClient(apolloState, { getToken });\n    console.log(\"client: \");\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    );\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n\n    // Add some prop types\n    WithApollo.propTypes = {\n      // Used for getDataFromTree rendering\n      apolloClient: PropTypes.object,\n      // Used for client/server rendering\n      apolloState: PropTypes.object\n    };\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    console.log(\"Pass\");\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx;\n      console.log(\"CTX E: \");\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (ctx.apolloClient = initApolloClient(\n        {},\n        {\n          getToken: () => getToken(ctx.req)\n        }\n      ));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(ctx)\n        : {};\n      console.log(\"pageProps1: \", pageProps);\n      // Only on the server\n      if (typeof window === \"undefined\") {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return {};\n        }\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            console.log(\"pageProps2: \", pageProps);\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient = null;\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(...args) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  console.log(\"initApolloClient ...args: \", ...args);\n  if (typeof window === \"undefined\") {\n    return createApolloClient(...args);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(...args);\n  }\n\n  return apolloClient;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState = {}, { getToken }) {\n  const fetchOptions = {};\n\n  // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n  // 'https-proxy-agent' is required here because it's a sever-side only module\n  console.log(\"restoring CACHE INSTATE 0: \", initialState);\n  if (typeof window === \"undefined\") {\n    if (process.env.https_proxy) {\n      fetchOptions.agent = new (require(\"https-proxy-agent\"))(\n        process.env.https_proxy\n      );\n    }\n  }\n\n  const httpLink = new HttpLink({\n    uri: \"https://api.graph.cool/simple/v1/cj5geu3slxl7t0127y8sity9r\", // Server URL (must be absolute)\n    credentials: \"same-origin\",\n    fetch,\n    fetchOptions\n  });\n\n  const authLink = setContext((request, { headers }) => {\n    const token = getToken();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\"\n      }\n    };\n  });\n  console.log(\"restoring CACHE INSTATE: \", initialState);\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\", // Disables forceFetch on the server (so queries are only run once)\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n\n/**\n * Get the user token from cookie\n * @param {Object} req\n */\nfunction getToken(req) {\n  const cookies = cookie.parse(\n    req ? req.headers.cookie || \"\" : document.cookie\n  );\n  console.log(\"Got token: \", cookies.token);\n  return cookies.token;\n}\n"]},"metadata":{},"sourceType":"module"}